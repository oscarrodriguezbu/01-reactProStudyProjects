CURSO REACT PRO:
-------------------------------------------
-------------------------------------------
-------------------------------------------
Seccion 4:
- Aplicar Lazy Load en cada Componente

- Aplicar Lazy Load por módulo

La idea del módulo es que nos permita cargarlo y todas sus dependencias en conjunto.

Notas:

- No todo debe ir con lazyload, un modulo donde todo tenga acceso es preferible que esté cargado todo, en vistas restringidas si vale la pena el lazyload
-------------------------------------------
Seccion 5:
En esta sección aprenderemos el patrón de construcción de componentes llamado "Compound Component Pattern" el cual es muy usado por Material UI, ionic y muchos otros que trabajan con componentes previamente creados que se pueden anidar entre si mediante HOCs (Higher Order Components)

Puntualmente aprenderemos el patrón y crearemos nuestro propio ejemplo aplicado.

Pasos:
1. Construir y separar componentes pequeños faciles de ver
2. Usar el componente padre y que internamente podamos definir los componentes hijos


-------------------------------------------
Seccion 6: 
En esta sección aprenderemos a extender la funcionalidad de nuestro componente añadiendo la posibilidad de interpretar clases de CSS y/o estilos en línea (inline styles)

Para lograrlo necesitaremos realizar ciertas modificaciones a nuestras interfaces y componentes, pero al final del día, tendremos una componente personalizable.

Notas
- Para los estilos colocar el clasName en la interfaz del componente hijo y luego mandarle el className y mandarle la clase desde el padre
- Para el patron "Compound Component Pattern" se debe complementar el tipado de cada props de cada componente en una interfaz unificada en el archivo de interfaz
-     style?: React.CSSProperties es el tipado para los estilos



-------------------------------------------
Seccion 7:
Patrones de componentes - Control Props
En esta sección aprenderemos a darle el control a nuestro usuario o compañero de trabajo sobre las propiedades y estado de nuestro componente, usualmente este patrón es el que se utiliza de manera tradicional en formularios, es decir:

<input
    value={  algún valor de solo lectura }
    onChange={ alguna función que cambia el valor }
/>
Este patrón es el que implementaremos a continuación

Notas:
- Ayuda a la sincronizacion de data entre dos componentes, muy util para un carrito de compras de una tienda online estilo amazon
- 



-------------------------------------------
Seccion 8:
Patron State initializer + function child = Render props- Formik implementation


Lo que están apunto de observar en esta sección es el patrón State Initializer junto al diseño de componentes que utiliza Formik.

El principal objetivo es poder exponer todo lo que el usuario (otro desarrollador) puede utilizar, el patrón principalmente pide que se pueda ofrecer un estado inicial y una forma de re-establecer el estado a su forma original, pero nosotros aquí lo llevaremos a otro nivel exponiendo funciones y nuevas propiedades.

También aprenderemos a enviar una función como children, similar a la implementación de Formik.



-------------------------------------------
Seccion 9: NPM Deploy - Desplegar paquetes de componentes
Aquí realizaremos el primer despliegue a NPM de nuestro paquete.

Eventualmente lo haremos utilizando Storybook, pero por ahora lo haremos de la forma como tenemos nuestro componente y una forma directa de hacerlo.

Es importante también realizarlo con TypeScript y exponer los archivos de definición para que otros desarrolladores que también usen TypeScript, también tengan el auto-completado y manejo de errores.




-------------------------------------------
Seccion 10 
Formik -  React forms
Esta es una sección muy importante para comprender las bases y temas avanzados de Formik, aquí veremos:

useFormik

Formik Component

Formik Context

useField

Formik Custom Components

Custom Components

Metadata de los inputs

Abstractation

Yup

Validaciones tipicas

Validaciones personalizadas


Notas:
- Formik es un hook potenciado con muchas herramientas para manejar forms
- yup lo recomienda formic para manejar las validaciones
- Form, Field y ErrorMessage son props muy utiles del formic para optimizar el codigo mucho mas
- Formik Tambien se puede usar como otro componente que regresa un jsx
- El ErrorMessage devuelve un texto, pero se le puede especificar el tipo de componente para que se muestre, por ejemplo div, span etc
- El Field Tambien se le puede especificar el tipo de input, como type="checkbox", as="select", etc
- Para crear campos customizados podemos usar el hook useField para extraer todas las propiedades necesarias
- 


-------------------------------------------
Seccion 11 Formik Dynamic y cutom forms

Esta sección tomaremos el conocimiento aprendido sobre Formik y crearemos formularios dinámicos basados en data en formato JSON. Aquí aprenderemos:

Construir inputs de forma dinámica

Construir validaciones basados en propiedades

Selects, Inputs

Ideas para validaciones

Es una sección corta, pero bastante solicitada, el objetivo principal de la misma es que tengamos la idea de formularios dinámicos y que logremos adaptarlo a nuestras necesidades particulares.


-------------------------------------------
Seccion 12 Storybook - Cama para creacion y mantenimiento de componentes
Esta sección está enfocada en aprender como integrar Storybook en nuestras aplicaciones de React para transformarla en una aplicación que nos ayudará a probar y desarrollar de una mejor manera nuestros componentes.

La sección tiene por objectivo aprender:

Integrar Storybook en una aplicación de React con Npx

Crear un componente desde cero

Crear historias

Configurar historias

Utilizar varios controles para las properties

Integración con TypeScript

Crear documentaciones de componentes

Desplegar documentación a diferentes sitios

Bonus: Chromatic para desplegar Storybook de forma colaborativa


Notas:
- Chromatic es un servicio de pago
- 





-------------------------------------------

seccion 14: Aplicacion React y Backend para PWA













-------------------------------------------









