CURSO REACT PRO:
-------------------------------------------
-------------------------------------------
-------------------------------------------
Seccion 4:
- Aplicar Lazy Load en cada Componente

- Aplicar Lazy Load por módulo

La idea del módulo es que nos permita cargarlo y todas sus dependencias en conjunto.

Notas:

- No todo debe ir con lazyload, un modulo donde todo tenga acceso es preferible que esté cargado todo, en vistas restringidas si vale la pena el lazyload
-------------------------------------------
Seccion 5:
En esta sección aprenderemos el patrón de construcción de componentes llamado "Compound Component Pattern" el cual es muy usado por Material UI, ionic y muchos otros que trabajan con componentes previamente creados que se pueden anidar entre si mediante HOCs (Higher Order Components)

Puntualmente aprenderemos el patrón y crearemos nuestro propio ejemplo aplicado.

Pasos:
1. Construir y separar componentes pequeños faciles de ver
2. Usar el componente padre y que internamente podamos definir los componentes hijos


-------------------------------------------
Seccion 6: 
En esta sección aprenderemos a extender la funcionalidad de nuestro componente añadiendo la posibilidad de interpretar clases de CSS y/o estilos en línea (inline styles)

Para lograrlo necesitaremos realizar ciertas modificaciones a nuestras interfaces y componentes, pero al final del día, tendremos una componente personalizable.

Notas
- Para los estilos colocar el clasName en la interfaz del componente hijo y luego mandarle el className y mandarle la clase desde el padre
- Para el patron "Compound Component Pattern" se debe complementar el tipado de cada props de cada componente en una interfaz unificada en el archivo de interfaz
-     style?: React.CSSProperties es el tipado para los estilos



-------------------------------------------
Seccion 7:
Patrones de componentes - Control Props
En esta sección aprenderemos a darle el control a nuestro usuario o compañero de trabajo sobre las propiedades y estado de nuestro componente, usualmente este patrón es el que se utiliza de manera tradicional en formularios, es decir:

<input
    value={  algún valor de solo lectura }
    onChange={ alguna función que cambia el valor }
/>
Este patrón es el que implementaremos a continuación

Notas:
- Ayuda a la sincronizacion de data entre dos componentes, muy util para un carrito de compras de una tienda online estilo amazon
- 



-------------------------------------------
Seccion 8:
Patron State initializer + function child = Render props- Formik implementation


Lo que están apunto de observar en esta sección es el patrón State Initializer junto al diseño de componentes que utiliza Formik.

El principal objetivo es poder exponer todo lo que el usuario (otro desarrollador) puede utilizar, el patrón principalmente pide que se pueda ofrecer un estado inicial y una forma de re-establecer el estado a su forma original, pero nosotros aquí lo llevaremos a otro nivel exponiendo funciones y nuevas propiedades.

También aprenderemos a enviar una función como children, similar a la implementación de Formik.



-------------------------------------------
Seccion 9: NPM Deploy - Desplegar paquetes de componentes
Aquí realizaremos el primer despliegue a NPM de nuestro paquete.

Eventualmente lo haremos utilizando Storybook, pero por ahora lo haremos de la forma como tenemos nuestro componente y una forma directa de hacerlo.

Es importante también realizarlo con TypeScript y exponer los archivos de definición para que otros desarrolladores que también usen TypeScript, también tengan el auto-completado y manejo de errores.




-------------------------------------------
Seccion 10 
Formik -  React forms
Esta es una sección muy importante para comprender las bases y temas avanzados de Formik, aquí veremos:

useFormik

Formik Component

Formik Context

useField

Formik Custom Components

Custom Components

Metadata de los inputs

Abstractation

Yup

Validaciones tipicas

Validaciones personalizadas


Notas:
- Formik es un hook potenciado con muchas herramientas para manejar forms
- yup lo recomienda formic para manejar las validaciones
- Form, Field y ErrorMessage son props muy utiles del formic para optimizar el codigo mucho mas
- Formik Tambien se puede usar como otro componente que regresa un jsx
- El ErrorMessage devuelve un texto, pero se le puede especificar el tipo de componente para que se muestre, por ejemplo div, span etc
- El Field Tambien se le puede especificar el tipo de input, como type="checkbox", as="select", etc
- Para crear campos customizados podemos usar el hook useField para extraer todas las propiedades necesarias
- 


-------------------------------------------
Seccion 11 Formik Dynamic y cutom forms

Esta sección tomaremos el conocimiento aprendido sobre Formik y crearemos formularios dinámicos basados en data en formato JSON. Aquí aprenderemos:

Construir inputs de forma dinámica

Construir validaciones basados en propiedades

Selects, Inputs

Ideas para validaciones

Es una sección corta, pero bastante solicitada, el objetivo principal de la misma es que tengamos la idea de formularios dinámicos y que logremos adaptarlo a nuestras necesidades particulares.


-------------------------------------------
Seccion 12 Storybook - Cama para creacion y mantenimiento de componentes
Esta sección está enfocada en aprender como integrar Storybook en nuestras aplicaciones de React para transformarla en una aplicación que nos ayudará a probar y desarrollar de una mejor manera nuestros componentes.

La sección tiene por objectivo aprender:

Integrar Storybook en una aplicación de React con Npx

Crear un componente desde cero

Crear historias

Configurar historias

Utilizar varios controles para las properties

Integración con TypeScript

Crear documentaciones de componentes

Desplegar documentación a diferentes sitios

Bonus: Chromatic para desplegar Storybook de forma colaborativa


Notas:
- Chromatic es un servicio de pago
- 





-------------------------------------------

seccion 14: Aplicacion React y Backend para PWA

En esta sección tendremos unas instalaciones de una aplicación y backend hechos en mi curso de React de cero a experto, no hace falta que tomen ese curso, pero es una aplicación real de React, con patrón Redux y autenticación por JWT hacia nuestro backend.

El objetivo de la sección es:

Tener una aplicación real de React

Tener un backend y base de datos

Tener una introducción a las PWAs


NOTAS:
- SE TRABAJA SOBRE EL PROYECTO DEL CALENDARIO DEL CURSO DE REACT DE CERO A EXPERTO
- Para trabajar en esta sección descargué el front terminado del curso y puse a correr mi backend:
	https://github.com/oscarrodriguezbu/React-MERN-calendar-backend
- Usuario para login: email:oscar@oscar.com password:123456
- 


PWA:
• Acceso a la aplicación sin conexión
• Creación de base de datos local (No guardar info sensible) Es una base de datos temporal pero tiene riesgos
• Push Notifications*
• Uso de recursos nativos como la cámara y GPS
• Sincronización en segundo plano, (sincroniza la base de datos cuando hay conexión.
• Entre otras cosas



Service Worker
Funciona de proxy en el background
•Intercepta peticiones
•Esta pendiente de notificaciones push
•Corre en segundo plano
•Maneja el caché

Importante:
Servido en protocolo HTTPS
Funciona localmente “localhost:xxx”
No funciona en desarrollo “yarn start”



-------------------------------------------

Seccion 15: React + PWA:
Esta sección es una introducción técnica a las PWA con aplicaciones de React, recuerden que la PWA no es una tecnología que sólo se aplique a React, pero aquí veremos como integrarlo de varias maneras.

Si pueden, creen un commit / branch en Git para que después puedan regresar rápidamente al proyecto tal cual lo tenemos ahora, ya que después haremos lo mismo y mucho más pero con Workbox.

Esta sección es importante porque explicamos los fundamentos y formas te trabajar con la PWA usando la configuración por defecto que nos ofrece npx create-react-app



Puntualmente veremos:

Service Worker

Caché

Instalación

Fetch

Estrategias del caché

Network first

Cache Only

Network first with cache fallback




Notas: 
- comando serve --build para contruir y desplegar al mismo tiempo
- Hay que instalar y configurar varias cosas para empezar
- Se crea como una clonacion del proyecto frontend pero con las configuraciones para trabajar con service worker
- se copian dos archivos del proyecto clonado al proyecto original
- copiar algunas dependencias del package json al proyecto original
- generar un nuevo build con npm build
- y etc mejor seguir paso a paso los videos, muchas configuraciones y cosas que tener en cuenta




-------------------------------------------
Seccion 16 workbox:

Lo mismo que la seccion anterior pero optimizado y con mejores herramientas. Basicamente son puras configuraciones y alguna que otra modificacion al codigo de React


Workbox es una herramienta que compro Google y ahora le da soporte, que permite configuraciones poderosas, rápidas y fáciles para el manejo de nuestras PWAs.

Aquí aprenderemos:

Detectar Online y Offline desde React

Workbox

Wizard

Estrategias

Background Sync

IndexedDB

Offline CRUD

Optimizaciones de nuestro service worker




-------------------------------------------

Seccion 17
Mapas - Marcadores - Rutas Polylines - Mapbox

Esta es una sección bonus añadida después de haber terminado el curso, la cual tiene por objetivo aprender:

Uso de Mapbox con TypeScript

Rutas y direcciones

Marcadores

Comunicación entre contextos

Distancia entre dos puntos

Duración aproximada del viaje

Es una sección bien interesante que les puede servir mucho, especialmente si quieren realizar cualquier trabajo con mapas en sus aplicaciones móviles o web.


Nota:
- En devtools clic en 3 puntos, more tools, sensor: eso es para jugar con la localizacion
- 


MAPBOX PIDE TARJETA DE CREDITO PARA CONTINUAR:
ALTERNATIVAS:
https://maplibre.org/maplibre-gl-js/docs/API/
https://docs.maptiler.com/sdk-js/examples/how-to-use/

En youtube el profe Fernando ha resubido la sección de mapas:
https://www.youtube.com/watch?v=GvCUY8muozk&list=PLCKuOXG0bPi2dfwRr7m63bhj8T3OaRuw3


-------------------------------------------






